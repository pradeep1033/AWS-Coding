import boto3
import os
import mimetypes

# returns a list of the files in the branch or commit
def get_blob_list(codecommit, repository, afterCommitSpecifier, beforeCommitSpecifier=None):
    args = {'repositoryName': repository, 'afterCommitSpecifier': afterCommitSpecifier}

    if beforeCommitSpecifier:
        args['beforeCommitSpecifier'] = beforeCommitSpecifier

    response = codecommit.get_differences(**args)

    blob_list = [difference['afterBlob'] for difference in response['differences']]

    while 'NextToken' in response:
        args['NextToken'] = response['NextToken']
        response = codecommit.get_differences(**args)
        blob_list += [difference['afterBlob'] for difference in response['differences']]

    return blob_list

# lambda-function
# triggered by changes in a codecommit repository
# reads files in the repository and uploads them to s3-bucket
#
# ENVIRONMENT VARIABLES:
#     s3BucketName
#     codecommitRegion
#     repository
#     branch
#
# TIME OUT: 1 min
#
# EXECUTION ROLE
#     lambda-codecommit-s3-execution-role (permissions: AWSCodeCommitReadOnly, AWSLambdaExecute)
#
def lambda_handler(event, context):
    print(event)
    s3_client = boto3.client('s3')
    s3_bucket_name = os.environ['s3BucketName']
    codecommit_client = boto3.client('codecommit', region_name=os.environ['codecommitRegion'])
    repository_name = os.environ['repository']
    branch_name = os.environ['branch']

    last_commit_id = event['detail']['commitId']
    response = codecommit_client.get_commit(
        repositoryName=repository_name,
        commitId=last_commit_id
    )
    after_commit_id = response['commit']['treeId']
    
    for blob in get_blob_list(codecommit_client, repository_name, after_commit_id, last_commit_id):
        path = os.path.join(os.environ['s3Folder'], blob['path'])
        content = (codecommit_client.get_blob(repositoryName=repository_name, blobId=blob['blobId']))['content']
        content_type = mimetypes.guess_type(path)[0]
        if content_type is not None:
            s3_client.put_object(Body=(content), Bucket=s3_bucket_name, Key=path, ContentType=content_type)
        else:
            s3_client.put_object(Body=(content), Bucket=s3_bucket_name, Key=path)
