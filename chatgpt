To create a CodeBuild package that triggers on code commit and uploads committed files to an S3 bucket using the aws sync command, you can follow these steps:

Create an S3 bucket: Create an S3 bucket in the AWS Management Console or using the AWS CLI. Note the name of the bucket and the region it is in.

Create a CodeBuild project: Create a CodeBuild project in the AWS Management Console or using the AWS CLI. You can specify the source repository, build environment, and build commands in the project configuration.

Configure the build environment: In the build environment, you should include the AWS CLI, which is required to run the aws sync command. You can also include any other dependencies that your build commands require.

Configure the build commands: In the build commands, you can use the aws sync command to upload the committed files to the S3 bucket. The aws sync command synchronizes files and folders between your local machine and an S3 bucket. You can specify the source directory and the destination bucket and path.

Here is an example buildspec.yml file that you can use for your CodeBuild project:

version: 0.2

phases:
  build:
    commands:
      - aws s3 sync <source_directory> s3://<bucket_name>/<destination_path> --delete

In this example, you should replace <source_directory> with the path to the directory that contains the committed files, <bucket_name> with the name of the S3 bucket you created, and <destination_path> with the path in the bucket where you want to upload the files.

Connect CodeCommit with CodeBuild: To connect CodeCommit with CodeBuild, you can create a trigger in CodeCommit that triggers the CodeBuild project when a commit is pushed to the repository.

Test the CodeBuild project: Push a commit to your CodeCommit repository to test the CodeBuild project. The build should start automatically, and the committed files should be uploaded to the specified S3 bucket.

Note: Ensure that the CodeBuild IAM role has the necessary permissions to read from the CodeCommit repository and write to the S3 bucket. Also, make sure to store any sensitive data, such as AWS access keys, in a secure way, such as using AWS Secrets Manager.
